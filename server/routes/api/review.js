const express = require("express");
const router = express.Router();

const Logs = require("../../models/Logs");
const ReviewModel = require("../../models/Review");
const User = require("../../models/User")

import { SQLconnection } from '../../config/database'

    // "asin": {type: String }, // will be automatically generated by mysql
    // "helpful": { type: String }, // e.g. 2/3
    // "overall": { type: Number },
    // "reviewText": { type: String },
    // "reviewTime": { type: Date },
    // "reviewerID" : {type: String},
    // "reviewerName" : { type: String },
    // "summary":{ type: String },
    // "unixReviewTime": { type: Number},  //timestamp


// API Endpoint: http://localhost:5000/api/review/allreviews
router.get('/allreviews', (req, res, next) => {
    SQLconnection.query('SELECT * FROM Kindle LIMIT 20;', function (error, results ) {
        if (error){
            console.log(error)
        }else{
            res.send(JSON.stringify(results));
        }
    });
});

// API Endpoint: http://localhost:5000/api/review/:asin
router.get('/:asin', (req, res, next) => {
    const asin = req.params.asin
    console.log(asin)
    SQLconnection.query(`SELECT * FROM Kindle WHERE asin = '${asin}';`, function (error, results ) {
        if (error){
            console.log(error)
        }else{
            res.send(JSON.stringify(results));
        }
    });
});

// API Endpoint: http://localhost:5000/api/review/user/:reviewerID
router.get('/user/:reviewerID', (req, res, next) => { // or -> /api/user/:id/reviews ???
    const reviewerID = req.params.reviewerID
    const limit = req.query.limit || 5
    const offset = req.query.offset || 0

    const query = `SELECT * from Kindle WHERE reviewerID = '${reviewerID}' LIMIT ${offset}, ${limit};`
    console.log(query);
    SQLconnection.query(query, (error, results, fields) => {
        if(error) {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - ReviewerID",
                method: "GET",
                userID: null,
                parameters: "/user/" + reviewerID,
                response: "400"
            });
            newLogs.save();
            throw error;
        } else {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - ReviewerID",
                method: "GET",
                userID: null,
                parameters: "/user/" + reviewerID,
                response: "200"
            });
            newLogs.save();
            res.send(JSON.stringify(results));
        }
    });
});

// API Endpoint: http://localhost:5000/api/review/book/:bookID
router.get('/book/:bookID', (req, res, next) => { // or -> /api/user/:id/reviews ???
    const bookID = req.params.bookID
    const limit = req.query.limit || 10
    const offset = req.query.offset || 0

        // find book and get all reviews
    const query = `SELECT * from Kindle WHERE asin = '${bookID}' LIMIT ${offset}, ${limit};`

    SQLconnection.query(query, (error, results, fields) => {
        if(error) {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - ReviewerID",
                method: "GET",
                userID: null,
                parameters: "/book/" + bookID,
                response: "400"
            });
            newLogs.save();
            throw error;
        } else {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - ReviewerID",
                method: "GET",
                userID: null,
                parameters: "/book/" + bookID,
                response: "200"
            });
            newLogs.save();
            res.send(JSON.stringify(results));
        }
    });
});

// API Endpoint: http://localhost:5000/api/review/:bookID
router.post('/:bookID', (req, res, next) => {

    const bookID = req.params.bookID
    const review = req.body
    console.log('this is the body', req.body)
    const query = `INSERT INTO testKindle (asin, reviewText, reviewerID) 
    VALUES ('${bookID}', '${review.review}', '${review.token}');`

    // // const query = `INSERT INTO testKindle (asin, helpful, overall, reviewText, reviewTime, reviewerID, reviewerName, summary) VALUES ('${bookID}', '${review.helpful}', '${review.overall}', '${review.reviewText}', '${review.reviewTime}', '${review.reviewerID}', '${review.reviewerName}', '${review.summary}');` //TODO
    SQLconnection.query(query, (error, results, fields) => {
        if(error) {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - BookID",
                method: "POST",
                userID: null,
                parameters: "/" + bookID,
                response: "400"
            });
            newLogs.save();
            throw error;
        } else {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - BookID",
                method: "POST",
                userID: null,
                parameters: "/" + bookID,
                response: "200"
            });
            newLogs.save();
            res.send(JSON.stringify(results));
        }
    });
})

// API Endpoint: http://localhost:5000/api/review/:asin
router.put('/:asin', (req, res, next) => {
    const asin = req.params.asin

    const query = `UPDATE testKindle SET column1 = value1, column2 = value2, ... WHERE asin = ${asin};` //TODO

    SQLconnection.query(query, (error, results, fields) => {
        if(error) {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - asin",
                method: "PUT",
                userID: null,
                parameters: "/" + asin,
                response: "400"
            });
            newLogs.save();
            throw error;
        } else {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - asin",
                method: "PUT",
                userID: null,
                parameters: "/" + asin,
                response: "200"
            });
            newLogs.save();
            res.send(JSON.stringify(results));
        }
    });

router.delete("/:asin", (req, res, next) => {
    const asin = req.params.asin

    const query = `DELETE FROM testKindle WHERE asin = ${asin};` //TODO

    SQLconnection.query(query, (error, results, fields) => {
        if(error) {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - asin",
                method: "DELETE",
                userID: null,
                parameters: "/" + asin,
                response: "400"
            });
            newLogs.save();
            throw error;
        } else {
            const newLogs = new Logs({
                timestamp: Date.now(),
                database: "MySQL - asin",
                method: "DELETE",
                userID: null,
                parameters: "/" + asin,
                response: "200"
            });
            newLogs.save();
            res.send(JSON.stringify(results));
        }
    });
})

})


module.exports = router;