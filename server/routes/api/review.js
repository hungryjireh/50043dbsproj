const express = require("express");
const router = express.Router();

import { SQLconnection } from '../../config/database'


    // "asin": {type: String }, // will be automatically generated by mysql
    // "helpful": { type: String }, // e.g. 2/3
    // "overall": { type: Number },
    // "reviewText": { type: String },
    // "reviewTime": { type: Date },
    // "reviewerID" : {type: String},
    // "reviewerName" : { type: String },
    // "summary":{ type: String },
    // "unixReviewTime": { type: Number},  //timestamp



router.get('/user/:reviewerID', (req, res, next) => { // or -> /api/user/:id/reviews ???
    const reviewerID = req.params.reviewerID
    const limit = req.query.limit || 5
    const offset = req.query.offset || 0

    const query = `SELECT * from reviews WHERE reviewerID == ${reviewerID} LIMIT ${offset}, ${limit};`

    SQLconnection.query(query, (error, results, fields) => {
        if(error) throw error;
        res.send(JSON.stringify(results));
    });
});

router.get('/book/:bookID', (req, res, next) => { // or -> /api/user/:id/reviews ???
    const bookID = req.params.bookID
    const limit = req.query.limit || 10
    const offset = req.query.offset || 0

        // find book and get all reviews
    const query = `TODO LIMIT ${offset}, ${limit};`

    SQLconnection.query(query, (error, results, fields) => {
        if(error) throw error;
        res.send(JSON.stringify(results));
    });
});

router.post('/:bookID', (req, res, next) => {

    const bookID = req.params.bookID
    const review = req.body

    const query = "INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);" //TODO

    SQLconnection.query(query, (error, results, fields) => {
        if(error) throw error;
        res.send(JSON.stringify(results));
    });
})


router.put('/:asin', (req, res, next) => {
    const asin = req.params.asin

    const query = "UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;" //TODO

    SQLconnection.query(query, (error, results, fields) => {
        if(error) throw error;
        res.send(JSON.stringify(results));
    });

router.delete("/:asin", (req, res, next) => {
    const asin = req.params.asin

    const query = "DELETE FROM table_name WHERE condition;" //TODO

    SQLconnection.query(query, (error, results, fields) => {
        if(error) throw error;
        res.send(JSON.stringify(results));
    });
})

})


module.exports = router;